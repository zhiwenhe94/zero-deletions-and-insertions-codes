//---------------------Implementation Algorithm 1 for w=6-----------------------------
//By executing the following function, we can obtain a $(w+1,2,2t)=(7,2,6)$ code $A_t^{w+1}(\Y)$ with length $w+1$, distance $2$ and constant weight $2t$.
//You can set different t to verify
t:=3;
w:=6;
D:=2;
a:=(w+1-((w+1) mod 3))/3-1;

//Obtains the set {(y_0, y_1, ..., y_a): y_i \in [0, t], i \in [0, a], y_0 + y_1 + ... + y_a = t}.
SOL:=function(w,t);
Y:={};
for y0,ya in [0..t] do 
    if y0+ya eq t then Y join:={[y0,ya]};end if;
end for;
return Y;
end function;

//Obtains the maximum value in the set S.
MAX:=function(S);
ymax:=Random(S);
for y in S do 
     if y ge ymax then ymax:=y;end if;
end for;
return ymax;
end function;

//Obtains the minimum value in the set S.
MIN:=function(S);
ymin:=Random(S);
for y in S do 
     if y le ymin then ymin:=y;end if;
end for;
return ymin;
end function;

//Obtains the set of indices i for which $y = (y_0, y_1, ..., y_a)$ has values equal to $y_{max}$.
SUB:=function(ymax,y);
A:={};
for i in [0..1] do 
     if y[i+1] eq ymax then A join:={i};end if;
end for;
return A;
end function;

// generate codewords $A_t^{w+1}(\Y)$
C3:=function(t);
C3s:={};
for y0,y1,y2 in [0..t] do 
    if y0+y1+y2 eq t then 
        C3s join:={[y0,y1,y2]};
    end if;
end for;
return C3s;
end function;

C4:=function(t);
C4s:={};
for y0,y1,y2,y3 in [0..t] do 
    if y0+y1+y2+y3 eq t then 
        C4s join:={[y0,y1,y2,y3]};
    end if;
end for;
return C4s;
end function;

Cod0:=function(y);
Cs:={};
C3s1:=C3(y[1]);
C4s2:=C4(y[2]);
     for c1 in C3s1 do 
         for c2 in C4s2 do 
          x:=[0,0,0,0,0,0,0];
          for i in [1..3] do
               x[i]:=c1[i]*D;
               x[i+3]:=c2[i]*D;
          end for;
               x[7]:=c2[4]*D;
          Cs join:={x};
        end for;
    end for;
return Cs;
end function;

Cod1:=function(i0,y);
Cs:={};
B3s:={};
B4s:={};
C3s:={};
C4s:={};
if i0 eq 0 then 
B3s:=CsB3(y[1]); 
C4s:=C4(y[2]);
   for c1 in B3s do 
         for c2 in C4s do 
          x:=[0,0,0,0,0,0,0];
          for i in [1..3] do
               x[i]:=c1[i];
               x[i+3]:=c2[i]*D;
          end for;
               x[7]:=c2[4]*D;
          Cs join:={x};
        end for;
    end for;
else 
   Ys:={};
    for s0,s1 in [0..y[2]] do 
         if s0+s1 eq y[2] then 
              Ys join:={[s0,s1]};
         end if;
     end for;
    for s in Ys do 
         B3s1:=CsB3(s[1]);
         for sk in  B3s1 do 
         x0:=[0,0,0,0];
         x0[1]:=sk[1];
         x0[2]:=sk[2];
         x0[3]:=sk[3];
         x0[4]:=s[2]*D;
         B4s join:={x0};
         end for;
    end for;
C3s:=C3(y[1]);
for c1 in C3s do 
    for c2 in B4s do 
         x:=[0,0,0,0,0,0,0];
         for i in [1..3] do
               x[i]:=c1[i]*D;
               x[i+3]:=c2[i];
          end for;
               x[7]:=c2[4];
               Cs join:={x};
      end for;
end for;
end if;
return Cs;
end function;            

FINDCODE:=function(w,t);
Codebk:={};
Y:=SOL(w,t);
al:=0;
if w mod 3 eq 2 then al:=w-2;end if;
if w mod 3 eq 0 then al:=w-3;end if;
if w mod 3 eq 1 then al:=w-4;end if;
for y in Y do 
     yft:=MAX({y[i+1]:i in [0..1]});
     Smax:={};
     for i in [0..1] do 
         if y[i+1] eq yft then Smax join:={y[i+1]};end if;
     end for;
     if #SUB(yft,y) ge 2 then 
         Codebk join:=Cod0(y);
     else 
         i0:=MIN(SUB(yft,y));
         ysd:=MAX({y[i+1]:i in [0..1]} diff Smax);
         if yft-ysd ge 2then 
              Codebk join:=Cod1(i0,y);
         else 
              if i0 le MIN(SUB(ysd,y))-1 then 
                  Codebk join:=Cod1(i0,y);
              else 
                  Codebk join:=Cod0(y);
              end if;
        end if;
     end if;
end for;
return Codebk;
end function;


// check the minimum distance of $A_t^{w+1}(\Y)$ $D=2$
DisCk:=function(A);
ck:=1;
for x,y in A do 
     if x ne y then 
        Ds:={};
         for i in [1..7] do 
              Ds join:={Abs(x[i]-y[i])};
         end for;
        if MAX(Ds) le 1 then ck:=0;print x,y;break;end if;
     end if;
end for;
return ck;
end function;

At7Y:=FINDCODE(w,t);
if DisCk(At7Y) eq 1 then print "The code At7Y has minimum distance >=2.";end if;

//size of At7Y
#At7Y;


//check constant weight
W:={};
for y in At7Y do 
     ys:=0;
     for i in [1..7] do 
          ys:=ys+y[i];
     end for;
    W join:={ys};
end for;
if #W eq 1 and Random(W) eq 2*t then print "At7Y has constant weight 2t=",2*t;end if;
